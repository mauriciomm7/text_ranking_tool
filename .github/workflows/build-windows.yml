name: Build Windows Executable

on:
  workflow_dispatch:
  push:
    branches: [ main]

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Read version from file
      id: get_version
      shell: pwsh
      run: |
        $version = Get-Content version.txt
        echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      
    - name: Build Windows executable
      run: |
        cd packaging/windows
        pyinstaller text_ranking_tool_windows.spec

    - name: Create distribution package
      shell: pwsh
      run: |
        cd packaging/windows/dist
        
        # Create devroot directory structure
        mkdir devroot
        mkdir devroot\external_data
        mkdir devroot\external_exports
        mkdir devroot\internal_data
        mkdir devroot\internal_exports
        mkdir devroot\internal_users
        
        # Create .gitkeep files to preserve empty directories
        Set-Content -Path devroot\external_exports\.gitkeep -Value "# This file ensures the directory is preserved in archives"
        Set-Content -Path devroot\internal_data\.gitkeep -Value "# This file ensures the directory is preserved in archives"
        Set-Content -Path devroot\internal_exports\.gitkeep -Value "# This file ensures the directory is preserved in archives"
        Set-Content -Path devroot\internal_users\.gitkeep -Value "# This file ensures the directory is preserved in archives"
        
        # Copy config to root level
        copy ..\..\..\config.json .
        copy ..\..\..\version.txt .
        
        # Copy sample CSVs to devroot\external_data if any exist
        if (Test-Path ..\..\..\devroot\external_data\*.csv) {
          Copy-Item ..\..\..\devroot\external_data\*.csv devroot\external_data\
        }

    - name: Zip distribution package
      shell: pwsh
      run: |
        cd packaging/windows/dist
        Compress-Archive -Path * -DestinationPath ../TextRankingTool-Windows-${{ steps.get_version.outputs.VERSION }}-Complete.zip

    - name: Upload zipped Windows package
      uses: actions/upload-artifact@v4
      with:
        name: TextRankingTool-Windows-${{ steps.get_version.outputs.VERSION }}-Complete
        path: packaging/windows/TextRankingTool-Windows-${{ steps.get_version.outputs.VERSION }}-Complete.zip
